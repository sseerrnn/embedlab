
Final_project_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006248  08006248  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006250  08006250  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004194  20000074  080062cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004208  080062cc  00024208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123fc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00034df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017568  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012670  00000000  00000000  0004e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d1b  00000000  00000000  00060ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  000f6834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061ac 	.word	0x080061ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080061ac 	.word	0x080061ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <vApplicationGetIdleTaskMemory+0x30>)
 8000d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	200000e4 	.word	0x200000e4

08000d94 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
// UART
char buffer[200];
char Rx_data[11] = { 0 };
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	22c8      	movs	r2, #200	; 0xc8
 8000da2:	490a      	ldr	r1, [pc, #40]	; (8000dcc <HAL_UART_RxCpltCallback+0x38>)
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <HAL_UART_RxCpltCallback+0x3c>)
 8000da6:	f002 facc 	bl	8003342 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 1000);
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	22c8      	movs	r2, #200	; 0xc8
 8000db0:	4906      	ldr	r1, [pc, #24]	; (8000dcc <HAL_UART_RxCpltCallback+0x38>)
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_UART_RxCpltCallback+0x40>)
 8000db4:	f002 fac5 	bl	8003342 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data, 11);
 8000db8:	220b      	movs	r2, #11
 8000dba:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <HAL_UART_RxCpltCallback+0x44>)
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_RxCpltCallback+0x40>)
 8000dbe:	f002 fb52 	bl	8003466 <HAL_UART_Receive_IT>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200003b8 	.word	0x200003b8
 8000dd0:	20000370 	.word	0x20000370
 8000dd4:	2000032c 	.word	0x2000032c
 8000dd8:	20000480 	.word	0x20000480

08000ddc <delay>:
uint8_t Distance  = 0;

#define TRIG_PIN GPIO_PIN_11
#define TRIG_PORT GPIOA

void delay(uint16_t time){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <delay+0x30>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time){
 8000dee:	bf00      	nop
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <delay+0x30>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3f9      	bcc.n	8000df0 <delay+0x14>

	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200002e4 	.word	0x200002e4

08000e10 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7f1b      	ldrb	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f040 808a 	bne.w	8000f36 <HAL_TIM_IC_CaptureCallback+0x126>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11a      	bne.n	8000e60 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f001 ff89 	bl	8002d44 <HAL_TIM_ReadCapturedValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a45      	ldr	r2, [pc, #276]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e36:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6a1a      	ldr	r2, [r3, #32]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 020a 	bic.w	r2, r2, #10
 8000e4c:	621a      	str	r2, [r3, #32]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a1a      	ldr	r2, [r3, #32]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 0202 	orr.w	r2, r2, #2
 8000e5c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000e5e:	e06a      	b.n	8000f36 <HAL_TIM_IC_CaptureCallback+0x126>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d166      	bne.n	8000f36 <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f001 ff6a 	bl	8002d44 <HAL_TIM_ReadCapturedValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a37      	ldr	r2, [pc, #220]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d907      	bls.n	8000e9a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e00f      	b.n	8000eba <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d909      	bls.n	8000eba <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000eb4:	33ff      	adds	r3, #255	; 0xff
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000eb8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb20 	bl	8000504 <__aeabi_ui2d>
 8000ec4:	a31e      	add	r3, pc, #120	; (adr r3, 8000f40 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fb95 	bl	80005f8 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	f7ff fcb5 	bl	800084c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd97 	bl	8000a1c <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000ef4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			  sprintf(buffer,"A%dBC",Distance);
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4916      	ldr	r1, [pc, #88]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000f06:	f004 fcf1 	bl	80058ec <siprintf>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 020a 	bic.w	r2, r2, #10
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a12      	ldr	r2, [r2, #32]
 8000f24:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0202 	bic.w	r2, r2, #2
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	b020c49c 	.word	0xb020c49c
 8000f44:	3fa16872 	.word	0x3fa16872
 8000f48:	20000498 	.word	0x20000498
 8000f4c:	2000048c 	.word	0x2000048c
 8000f50:	20000490 	.word	0x20000490
 8000f54:	20000494 	.word	0x20000494
 8000f58:	20000499 	.word	0x20000499
 8000f5c:	080061d0 	.word	0x080061d0
 8000f60:	200003b8 	.word	0x200003b8
 8000f64:	200002e4 	.word	0x200002e4

08000f68 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HCSR04_Read+0x38>)
 8000f74:	f000 ff26 	bl	8001dc4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f7ff ff2f 	bl	8000ddc <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HCSR04_Read+0x38>)
 8000f86:	f000 ff1d 	bl	8001dc4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HCSR04_Read+0x3c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HCSR04_Read+0x3c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0202 	orr.w	r2, r2, #2
 8000f98:	60da      	str	r2, [r3, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	200002e4 	.word	0x200002e4

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fb6f 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f82f 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f941 	bl	800123c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 f915 	bl	80011e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fbe:	f000 f8e9 	bl	8001194 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000fc2:	f000 f891 	bl	80010e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <main+0x58>)
 8000fca:	f001 fbfd 	bl	80027c8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data, 11); // Nhận Data
 8000fce:	220b      	movs	r2, #11
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <main+0x5c>)
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <main+0x60>)
 8000fd4:	f002 fa47 	bl	8003466 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <main+0x64>)
 8000fda:	1d3c      	adds	r4, r7, #4
 8000fdc:	461d      	mov	r5, r3
 8000fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f9ed 	bl	80043ce <osThreadCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <main+0x68>)
 8000ff8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ffa:	f003 f9e1 	bl	80043c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <main+0x56>
 8001000:	200002e4 	.word	0x200002e4
 8001004:	20000480 	.word	0x20000480
 8001008:	2000032c 	.word	0x2000032c
 800100c:	080061d8 	.word	0x080061d8
 8001010:	200003b4 	.word	0x200003b4

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	; 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fc5a 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <SystemClock_Config+0xcc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <SystemClock_Config+0xcc>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <SystemClock_Config+0xd0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <SystemClock_Config+0xd0>)
 800105e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001084:	2310      	movs	r3, #16
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001088:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800108e:	2304      	movs	r3, #4
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f000 feac 	bl	8001df8 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010a6:	f000 f943 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 f90e 	bl	80022e8 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010d2:	f000 f92d 	bl	8001330 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_TIM1_Init+0xa4>)
 8001106:	4a22      	ldr	r2, [pc, #136]	; (8001190 <MX_TIM1_Init+0xa8>)
 8001108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_TIM1_Init+0xa4>)
 800110c:	2253      	movs	r2, #83	; 0x53
 800110e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_TIM1_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_TIM1_Init+0xa4>)
 8001118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800111c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_TIM1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_TIM1_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_TIM1_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <MX_TIM1_Init+0xa4>)
 8001132:	f001 faf9 	bl	8002728 <HAL_TIM_IC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f8f8 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_TIM1_Init+0xa4>)
 8001150:	f002 f828 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800115a:	f000 f8e9 	bl	8001330 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_TIM1_Init+0xa4>)
 8001176:	f001 fd49 	bl	8002c0c <HAL_TIM_IC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001180:	f000 f8d6 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200002e4 	.word	0x200002e4
 8001190:	40010000 	.word	0x40010000

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART1_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011cc:	f002 f86c 	bl	80032a8 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f8ab 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000032c 	.word	0x2000032c
 80011e4:	40011000 	.word	0x40011000

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 f842 	bl	80032a8 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f881 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000370 	.word	0x20000370
 8001238:	40004400 	.word	0x40004400

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <MX_GPIO_Init+0xd4>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a26      	ldr	r2, [pc, #152]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_GPIO_Init+0xd4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_GPIO_Init+0xd4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_GPIO_Init+0xd4>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_GPIO_Init+0xd4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <MX_GPIO_Init+0xd8>)
 80012ca:	f000 fd7b 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0xdc>)
 80012e6:	f000 fbe9 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80012ea:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_GPIO_Init+0xd8>)
 8001304:	f000 fbda 	bl	8001abc <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020800 	.word	0x40020800

0800131c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 8001324:	f7ff fe20 	bl	8000f68 <HCSR04_Read>
    osDelay(200);
 8001328:	20c8      	movs	r0, #200	; 0xc8
 800132a:	f003 f89c 	bl	8004466 <osDelay>
	HCSR04_Read();
 800132e:	e7f9      	b.n	8001324 <StartDefaultTask+0x8>

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x54>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_MspInit+0x54>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x54>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_MspInit+0x54>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_MspInit+0x54>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_MspInit+0x54>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
 8001382:	f000 fad2 	bl	800192a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_TIM_IC_MspInit+0x94>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d134      	bne.n	8001420 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_TIM_IC_MspInit+0x98>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001400:	2301      	movs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_TIM_IC_MspInit+0x9c>)
 800140c:	f000 fb56 	bl	8001abc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	201b      	movs	r0, #27
 8001416:	f000 fa88 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800141a:	201b      	movs	r0, #27
 800141c:	f000 faa1 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010000 	.word	0x40010000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_UART_MspInit+0xf8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d135      	bne.n	80014c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4822      	ldr	r0, [pc, #136]	; (8001534 <HAL_UART_MspInit+0x100>)
 80014ac:	f000 fb06 	bl	8001abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2025      	movs	r0, #37	; 0x25
 80014b6:	f000 fa38 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ba:	2025      	movs	r0, #37	; 0x25
 80014bc:	f000 fa51 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	e030      	b.n	8001524 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0x104>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d12b      	bne.n	8001524 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001504:	230c      	movs	r3, #12
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_UART_MspInit+0x100>)
 8001520:	f000 facc 	bl	8001abc <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011000 	.word	0x40011000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40004400 	.word	0x40004400

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f8e2 	bl	8001734 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001570:	f003 fcfc 	bl	8004f6c <xTaskGetSchedulerState>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800157a:	f003 ff3d 	bl	80053f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM1_CC_IRQHandler+0x10>)
 800158a:	f001 fa37 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002e4 	.word	0x200002e4

08001598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <USART1_IRQHandler+0x10>)
 800159e:	f001 ff93 	bl	80034c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000032c 	.word	0x2000032c

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f004 f946 	bl	800586c <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20020000 	.word	0x20020000
 800160c:	00000400 	.word	0x00000400
 8001610:	2000049c 	.word	0x2000049c
 8001614:	20004208 	.word	0x20004208

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001666:	f7ff ffd7 	bl	8001618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f004 f905 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fc9b 	bl	8000fa8 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001680:	08006258 	.word	0x08006258
  ldr r2, =_sbss
 8001684:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001688:	20004208 	.word	0x20004208

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f92b 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fe3a 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f943 	bl	800197e <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f90b 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000008 	.word	0x20000008
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	200004a0 	.word	0x200004a0

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200004a0 	.word	0x200004a0

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff feda 	bl	800175c <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d008      	beq.n	80019c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e052      	b.n	8001a6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0216 	bic.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HAL_DMA_Abort+0x62>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a18:	e013      	b.n	8001a42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1a:	f7ff fe9f 	bl	800175c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d90c      	bls.n	8001a42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e015      	b.n	8001a6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e4      	bne.n	8001a1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	223f      	movs	r2, #63	; 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e00c      	b.n	8001aae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2205      	movs	r2, #5
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e159      	b.n	8001d8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8148 	bne.w	8001d86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d005      	beq.n	8001b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d130      	bne.n	8001b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d017      	beq.n	8001bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a2 	beq.w	8001d86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <HAL_GPIO_Init+0x2e8>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a56      	ldr	r2, [pc, #344]	; (8001da4 <HAL_GPIO_Init+0x2e8>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <HAL_GPIO_Init+0x2e8>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5e:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x2ec>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_GPIO_Init+0x2f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x202>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <HAL_GPIO_Init+0x2f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x1fe>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <HAL_GPIO_Init+0x2f8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x1fa>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a46      	ldr	r2, [pc, #280]	; (8001db8 <HAL_GPIO_Init+0x2fc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x1f6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_GPIO_Init+0x300>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x1f2>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	; (8001da8 <HAL_GPIO_Init+0x2ec>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_GPIO_Init+0x304>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f aea2 	bls.w	8001ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e267      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d075      	beq.n	8001f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d00c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d157      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e242      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x74>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6f      	ldr	r2, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6c      	ldr	r2, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e90:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a68      	ldr	r2, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fc54 	bl	800175c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fc50 	bl	800175c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e207      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc40 	bl	800175c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc3c 	bl	800175c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1f3      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xe8>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c7      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fbf5 	bl	800175c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff fbf1 	bl	800175c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a8      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbd4 	bl	800175c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fbd0 	bl	800175c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e187      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d036      	beq.n	8002050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fbb4 	bl	800175c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fbb0 	bl	800175c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e167      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8002016:	e01b      	b.n	8002050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff fb9d 	bl	800175c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e00e      	b.n	8002044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff fb99 	bl	800175c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d907      	bls.n	8002044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e150      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002038:	40023800 	.word	0x40023800
 800203c:	42470000 	.word	0x42470000
 8002040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ea      	bne.n	8002026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8097 	beq.w	800218c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a7c      	ldr	r2, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b7a      	ldr	r3, [pc, #488]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b77      	ldr	r3, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x474>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x474>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a73      	ldr	r2, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb59 	bl	800175c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fb55 	bl	800175c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e10c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x30c>
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5e      	ldr	r2, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a54      	ldr	r2, [pc, #336]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fb1a 	bl	800175c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff fb16 	bl	800175c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0cb      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ee      	beq.n	800212c <HAL_RCC_OscConfig+0x334>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff fb04 	bl	800175c <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff fb00 	bl	800175c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0b5      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ee      	bne.n	8002158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a1 	beq.w	80022d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d05c      	beq.n	800225c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d141      	bne.n	800222e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fad4 	bl	800175c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff fad0 	bl	800175c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e087      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff faa9 	bl	800175c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff faa5 	bl	800175c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e05c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x416>
 800222c:	e054      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fa92 	bl	800175c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff fa8e 	bl	800175c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e045      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
 800225a:	e03d      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e038      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d028      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d121      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11a      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7ff f9c0 	bl	800175c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7ff f9bc 	bl	800175c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f920 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	080061fc 	.word	0x080061fc
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b094      	sub	sp, #80	; 0x50
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
 80024c0:	2300      	movs	r3, #0
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	2300      	movs	r3, #0
 80024c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d00d      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x40>
 80024d8:	2b08      	cmp	r3, #8
 80024da:	f200 80e1 	bhi.w	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x34>
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x3a>
 80024e6:	e0db      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024ec:	e0db      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_GetSysClockFreq+0x208>)
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f2:	e0d8      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	2200      	movs	r2, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
 8002514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002538:	0150      	lsls	r0, r2, #5
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4621      	mov	r1, r4
 8002540:	1a51      	subs	r1, r2, r1
 8002542:	6139      	str	r1, [r7, #16]
 8002544:	4629      	mov	r1, r5
 8002546:	eb63 0301 	sbc.w	r3, r3, r1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002558:	4659      	mov	r1, fp
 800255a:	018b      	lsls	r3, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002562:	4651      	mov	r1, sl
 8002564:	018a      	lsls	r2, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	ebb2 0801 	subs.w	r8, r2, r1
 800256c:	4659      	mov	r1, fp
 800256e:	eb63 0901 	sbc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	462b      	mov	r3, r5
 8002594:	eb49 0303 	adc.w	r3, r9, r3
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025a6:	4629      	mov	r1, r5
 80025a8:	024b      	lsls	r3, r1, #9
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b0:	4621      	mov	r1, r4
 80025b2:	024a      	lsls	r2, r1, #9
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	2200      	movs	r2, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c4:	f7fe fa4a 	bl	8000a5c <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d0:	e058      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	4611      	mov	r1, r2
 80025de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	0159      	lsls	r1, r3, #5
 80025fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fe:	0150      	lsls	r0, r2, #5
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4641      	mov	r1, r8
 8002606:	ebb2 0a01 	subs.w	sl, r2, r1
 800260a:	4649      	mov	r1, r9
 800260c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800261c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002624:	ebb2 040a 	subs.w	r4, r2, sl
 8002628:	eb63 050b 	sbc.w	r5, r3, fp
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	00eb      	lsls	r3, r5, #3
 8002636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4643      	mov	r3, r8
 8002642:	18e3      	adds	r3, r4, r3
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	464b      	mov	r3, r9
 8002648:	eb45 0303 	adc.w	r3, r5, r3
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265a:	4629      	mov	r1, r5
 800265c:	028b      	lsls	r3, r1, #10
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002664:	4621      	mov	r1, r4
 8002666:	028a      	lsls	r2, r1, #10
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266e:	2200      	movs	r2, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	61fa      	str	r2, [r7, #28]
 8002674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002678:	f7fe f9f0 	bl	8000a5c <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3750      	adds	r7, #80	; 0x50
 80026ac:	46bd      	mov	sp, r7
 80026ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	0800620c 	.word	0x0800620c

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002704:	f7ff ffdc 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0b5b      	lsrs	r3, r3, #13
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	0800620c 	.word	0x0800620c

08002728 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e041      	b.n	80027be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fe20 	bl	8001394 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 fb58 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e013      	b.n	800280e <HAL_TIM_IC_Start_IT+0x46>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_IC_Start_IT+0x2e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	e00b      	b.n	800280e <HAL_TIM_IC_Start_IT+0x46>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_IC_Start_IT+0x3e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002802:	b2db      	uxtb	r3, r3
 8002804:	e003      	b.n	800280e <HAL_TIM_IC_Start_IT+0x46>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_TIM_IC_Start_IT+0x58>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e013      	b.n	8002848 <HAL_TIM_IC_Start_IT+0x80>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b04      	cmp	r3, #4
 8002824:	d104      	bne.n	8002830 <HAL_TIM_IC_Start_IT+0x68>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e00b      	b.n	8002848 <HAL_TIM_IC_Start_IT+0x80>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d104      	bne.n	8002840 <HAL_TIM_IC_Start_IT+0x78>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e003      	b.n	8002848 <HAL_TIM_IC_Start_IT+0x80>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002846:	b2db      	uxtb	r3, r3
 8002848:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800284a:	7bbb      	ldrb	r3, [r7, #14]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002850:	7b7b      	ldrb	r3, [r7, #13]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0c2      	b.n	80029e0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_TIM_IC_Start_IT+0xa2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	e013      	b.n	8002892 <HAL_TIM_IC_Start_IT+0xca>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d104      	bne.n	800287a <HAL_TIM_IC_Start_IT+0xb2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	e00b      	b.n	8002892 <HAL_TIM_IC_Start_IT+0xca>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d104      	bne.n	800288a <HAL_TIM_IC_Start_IT+0xc2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	e003      	b.n	8002892 <HAL_TIM_IC_Start_IT+0xca>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_IC_Start_IT+0xda>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	e013      	b.n	80028ca <HAL_TIM_IC_Start_IT+0x102>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_IC_Start_IT+0xea>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b0:	e00b      	b.n	80028ca <HAL_TIM_IC_Start_IT+0x102>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_IC_Start_IT+0xfa>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	e003      	b.n	80028ca <HAL_TIM_IC_Start_IT+0x102>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d841      	bhi.n	8002954 <HAL_TIM_IC_Start_IT+0x18c>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <HAL_TIM_IC_Start_IT+0x110>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	0800290d 	.word	0x0800290d
 80028dc:	08002955 	.word	0x08002955
 80028e0:	08002955 	.word	0x08002955
 80028e4:	08002955 	.word	0x08002955
 80028e8:	0800291f 	.word	0x0800291f
 80028ec:	08002955 	.word	0x08002955
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002955 	.word	0x08002955
 80028f8:	08002931 	.word	0x08002931
 80028fc:	08002955 	.word	0x08002955
 8002900:	08002955 	.word	0x08002955
 8002904:	08002955 	.word	0x08002955
 8002908:	08002943 	.word	0x08002943
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0202 	orr.w	r2, r2, #2
 800291a:	60da      	str	r2, [r3, #12]
      break;
 800291c:	e01d      	b.n	800295a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0204 	orr.w	r2, r2, #4
 800292c:	60da      	str	r2, [r3, #12]
      break;
 800292e:	e014      	b.n	800295a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0208 	orr.w	r2, r2, #8
 800293e:	60da      	str	r2, [r3, #12]
      break;
 8002940:	e00b      	b.n	800295a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0210 	orr.w	r2, r2, #16
 8002950:	60da      	str	r2, [r3, #12]
      break;
 8002952:	e002      	b.n	800295a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	bf00      	nop
  }

  if (status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d13e      	bne.n	80029de <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fbf5 	bl	8003158 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_TIM_IC_Start_IT+0x220>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_TIM_IC_Start_IT+0x1e2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d013      	beq.n	80029aa <HAL_TIM_IC_Start_IT+0x1e2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_TIM_IC_Start_IT+0x224>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_TIM_IC_Start_IT+0x1e2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIM_IC_Start_IT+0x228>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_IC_Start_IT+0x1e2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_IC_Start_IT+0x22c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_IC_Start_IT+0x1e2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIM_IC_Start_IT+0x230>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d010      	beq.n	80029de <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	e007      	b.n	80029de <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40014000 	.word	0x40014000

080029fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0202 	mvn.w	r2, #2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f9e6 	bl	8000e10 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9ca 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f9d1 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0204 	mvn.w	r2, #4
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe f9bc 	bl	8000e10 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9a0 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f9a7 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0208 	mvn.w	r2, #8
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe f992 	bl	8000e10 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f976 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f97d 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0210 	mvn.w	r2, #16
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe f968 	bl	8000e10 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f94c 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f953 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f926 	bl	8002dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b80      	cmp	r3, #128	; 0x80
 8002b8c:	d10e      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d107      	bne.n	8002bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fb74 	bl	8003294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f918 	bl	8002e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0220 	mvn.w	r2, #32
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb3e 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e088      	b.n	8002d3c <HAL_TIM_IC_ConfigChannel+0x130>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f000 f968 	bl	8002f1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 020c 	bic.w	r2, r2, #12
 8002c5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	619a      	str	r2, [r3, #24]
 8002c6e:	e060      	b.n	8002d32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d11c      	bne.n	8002cb0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f000 f9b1 	bl	8002fec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6999      	ldr	r1, [r3, #24]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	619a      	str	r2, [r3, #24]
 8002cae:	e040      	b.n	8002d32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11b      	bne.n	8002cee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f000 f9ce 	bl	8003066 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 020c 	bic.w	r2, r2, #12
 8002cd8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
 8002cec:	e021      	b.n	8002d32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d11c      	bne.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f000 f9eb 	bl	80030de <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69d9      	ldr	r1, [r3, #28]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	61da      	str	r2, [r3, #28]
 8002d2c:	e001      	b.n	8002d32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d831      	bhi.n	8002dbc <HAL_TIM_ReadCapturedValue+0x78>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08002dbd 	.word	0x08002dbd
 8002d68:	08002dbd 	.word	0x08002dbd
 8002d6c:	08002dbd 	.word	0x08002dbd
 8002d70:	08002d9f 	.word	0x08002d9f
 8002d74:	08002dbd 	.word	0x08002dbd
 8002d78:	08002dbd 	.word	0x08002dbd
 8002d7c:	08002dbd 	.word	0x08002dbd
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002dbd 	.word	0x08002dbd
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002dbd 	.word	0x08002dbd
 8002d90:	08002db3 	.word	0x08002db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	60fb      	str	r3, [r7, #12]

      break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	60fb      	str	r3, [r7, #12]

      break;
 8002da6:	e00a      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	60fb      	str	r3, [r7, #12]

      break;
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	60fb      	str	r3, [r7, #12]

      break;
 8002dba:	e000      	b.n	8002dbe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002dbc:	bf00      	nop
  }

  return tmpreg;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00f      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d00b      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x38>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d017      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <TIM_Base_SetConfig+0xe8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <TIM_Base_SetConfig+0xec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <TIM_Base_SetConfig+0xf0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <TIM_Base_SetConfig+0xf4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <TIM_Base_SetConfig+0xf8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <TIM_Base_SetConfig+0xfc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <TIM_Base_SetConfig+0xe4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800

08002f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <TIM_TI1_SetConfig+0xbc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d00f      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <TIM_TI1_SetConfig+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <TIM_TI1_SetConfig+0xc4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <TIM_TI1_SetConfig+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_TI1_SetConfig+0x56>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <TIM_TI1_SetConfig+0xcc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <TIM_TI1_SetConfig+0x5a>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <TIM_TI1_SetConfig+0x5c>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e003      	b.n	8002f96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 030a 	and.w	r3, r3, #10
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40014000 	.word	0x40014000

08002fec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0210 	bic.w	r2, r3, #16
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	031b      	lsls	r3, r3, #12
 8003030:	b29b      	uxth	r3, r3
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800311c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	031b      	lsls	r3, r3, #12
 8003122:	b29b      	uxth	r3, r3
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003130:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2201      	movs	r2, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e050      	b.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d018      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d013      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a13      	ldr	r2, [pc, #76]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10c      	bne.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40014000 	.word	0x40014000

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e03f      	b.n	800333a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe f8b0 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fddb 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08a      	sub	sp, #40	; 0x28
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	d17c      	bne.n	800345c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Transmit+0x2c>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e075      	b.n	800345e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x3e>
 800337c:	2302      	movs	r3, #2
 800337e:	e06e      	b.n	800345e <HAL_UART_Transmit+0x11c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2221      	movs	r2, #33	; 0x21
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003396:	f7fe f9e1 	bl	800175c <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d108      	bne.n	80033c4 <HAL_UART_Transmit+0x82>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e003      	b.n	80033cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033d4:	e02a      	b.n	800342c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb1f 	bl	8003a24 <UART_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e036      	b.n	800345e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3302      	adds	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e007      	b.n	800341e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3301      	adds	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1cf      	bne.n	80033d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2140      	movs	r1, #64	; 0x40
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 faef 	bl	8003a24 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d11d      	bne.n	80034bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Receive_IT+0x26>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e016      	b.n	80034be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_UART_Receive_IT+0x38>
 800349a:	2302      	movs	r3, #2
 800349c:	e00f      	b.n	80034be <HAL_UART_Receive_IT+0x58>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fb24 	bl	8003b00 <UART_Start_Receive_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	e000      	b.n	80034be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b0ba      	sub	sp, #232	; 0xe8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_UART_IRQHandler+0x66>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fc03 	bl	8003d32 <UART_Receive_IT>
      return;
 800352c:	e256      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800352e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80de 	beq.w	80036f4 <HAL_UART_IRQHandler+0x22c>
 8003538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80d1 	beq.w	80036f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_UART_IRQHandler+0xae>
 800355e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0xd2>
 8003582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xf6>
 80035a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_UART_IRQHandler+0x126>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0208 	orr.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 81ed 	beq.w	80039d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_UART_IRQHandler+0x14e>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb8e 	bl	8003d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_UART_IRQHandler+0x17a>
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04f      	beq.n	80036e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa96 	bl	8003b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d141      	bne.n	80036da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800368e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800369a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1d9      	bne.n	8003656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4a7d      	ldr	r2, [pc, #500]	; (80038a4 <HAL_UART_IRQHandler+0x3dc>)
 80036b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f9dd 	bl	8001a76 <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00e      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f990 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e00a      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f98c 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f988 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ee:	e170      	b.n	80039d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	bf00      	nop
    return;
 80036f2:	e16e      	b.n	80039d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 814a 	bne.w	8003992 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8143 	beq.w	8003992 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 813c 	beq.w	8003992 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	f040 80b4 	bne.w	80038a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800374c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8140 	beq.w	80039d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800375e:	429a      	cmp	r2, r3
 8003760:	f080 8139 	bcs.w	80039d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	f000 8088 	beq.w	800388a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1d9      	bne.n	800377a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3314      	adds	r3, #20
 80037e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e1      	bne.n	80037c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3314      	adds	r3, #20
 8003822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800382c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	f023 0310 	bic.w	r3, r3, #16
 800385e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800386c:	65ba      	str	r2, [r7, #88]	; 0x58
 800386e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e3      	bne.n	8003848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe f886 	bl	8001996 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003892:	b29b      	uxth	r3, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8b6 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038a0:	e099      	b.n	80039d6 <HAL_UART_IRQHandler+0x50e>
 80038a2:	bf00      	nop
 80038a4:	08003c3b 	.word	0x08003c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 808b 	beq.w	80039da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8086 	beq.w	80039da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038f2:	647a      	str	r2, [r7, #68]	; 0x44
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	623b      	str	r3, [r7, #32]
   return(result);
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800392a:	633a      	str	r2, [r7, #48]	; 0x30
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	60fb      	str	r3, [r7, #12]
   return(result);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0310 	bic.w	r3, r3, #16
 8003962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003970:	61fa      	str	r2, [r7, #28]
 8003972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	617b      	str	r3, [r7, #20]
   return(result);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e3      	bne.n	800394c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f83e 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003990:	e023      	b.n	80039da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_UART_IRQHandler+0x4ea>
 800399e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f959 	bl	8003c62 <UART_Transmit_IT>
    return;
 80039b0:	e014      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00e      	beq.n	80039dc <HAL_UART_IRQHandler+0x514>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f999 	bl	8003d02 <UART_EndTransmit_IT>
    return;
 80039d0:	e004      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
    return;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
      return;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
      return;
 80039da:	bf00      	nop
  }
}
 80039dc:	37e8      	adds	r7, #232	; 0xe8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop

080039e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b090      	sub	sp, #64	; 0x40
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a34:	e050      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d04c      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a44:	f7fd fe8a 	bl	800175c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d241      	bcs.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a74:	637a      	str	r2, [r7, #52]	; 0x34
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	613b      	str	r3, [r7, #16]
   return(result);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa8:	623a      	str	r2, [r7, #32]
 8003aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	69f9      	ldr	r1, [r7, #28]
 8003aae:	6a3a      	ldr	r2, [r7, #32]
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e00f      	b.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d09f      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3740      	adds	r7, #64	; 0x40
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2222      	movs	r2, #34	; 0x22
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0220 	orr.w	r2, r2, #32
 8003b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b095      	sub	sp, #84	; 0x54
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	647b      	str	r3, [r7, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0c:	61ba      	str	r2, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c2e:	bf00      	nop
 8003c30:	3754      	adds	r7, #84	; 0x54
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fecf 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b21      	cmp	r3, #33	; 0x21
 8003c74:	d13e      	bne.n	8003cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d114      	bne.n	8003caa <UART_Transmit_IT+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e008      	b.n	8003cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6211      	str	r1, [r2, #32]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fe5e 	bl	80039e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08c      	sub	sp, #48	; 0x30
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	; 0x22
 8003d44:	f040 80ab 	bne.w	8003e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d117      	bne.n	8003d82 <UART_Receive_IT+0x50>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d113      	bne.n	8003d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d80:	e026      	b.n	8003dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d007      	beq.n	8003da6 <UART_Receive_IT+0x74>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <UART_Receive_IT+0x82>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e008      	b.n	8003dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d15a      	bne.n	8003e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0220 	bic.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d135      	bne.n	8003e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d10a      	bne.n	8003e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fdbf 	bl	8003a0c <HAL_UARTEx_RxEventCallback>
 8003e8e:	e002      	b.n	8003e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fc ff7f 	bl	8000d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e002      	b.n	8003ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3730      	adds	r7, #48	; 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b0c0      	sub	sp, #256	; 0x100
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	68d9      	ldr	r1, [r3, #12]
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	ea40 0301 	orr.w	r3, r0, r1
 8003ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f00:	f021 010c 	bic.w	r1, r1, #12
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	ea40 0301 	orr.w	r3, r0, r1
 8003f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <UART_SetConfig+0x2cc>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d005      	beq.n	8003f48 <UART_SetConfig+0xa0>
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <UART_SetConfig+0x2d0>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d104      	bne.n	8003f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7fe fbda 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f50:	e003      	b.n	8003f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7fe fbc1 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	f040 810c 	bne.w	8004180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f82:	415b      	adcs	r3, r3
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	eb12 0801 	adds.w	r8, r2, r1
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb43 0901 	adc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb8:	462b      	mov	r3, r5
 8003fba:	eb49 0303 	adc.w	r3, r9, r3
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	18db      	adds	r3, r3, r3
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
 8003fdc:	4613      	mov	r3, r2
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fec:	f7fc fd36 	bl	8000a5c <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <UART_SetConfig+0x2d4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800400c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	64b9      	str	r1, [r7, #72]	; 0x48
 8004018:	415b      	adcs	r3, r3
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004020:	4641      	mov	r1, r8
 8004022:	eb12 0a01 	adds.w	sl, r2, r1
 8004026:	4649      	mov	r1, r9
 8004028:	eb43 0b01 	adc.w	fp, r3, r1
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	4692      	mov	sl, r2
 8004042:	469b      	mov	fp, r3
 8004044:	4643      	mov	r3, r8
 8004046:	eb1a 0303 	adds.w	r3, sl, r3
 800404a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404e:	464b      	mov	r3, r9
 8004050:	eb4b 0303 	adc.w	r3, fp, r3
 8004054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800406c:	460b      	mov	r3, r1
 800406e:	18db      	adds	r3, r3, r3
 8004070:	643b      	str	r3, [r7, #64]	; 0x40
 8004072:	4613      	mov	r3, r2
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
 800407a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004082:	f7fc fceb 	bl	8000a5c <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4611      	mov	r1, r2
 800408c:	4b3b      	ldr	r3, [pc, #236]	; (800417c <UART_SetConfig+0x2d4>)
 800408e:	fba3 2301 	umull	r2, r3, r3, r1
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040a2:	4b36      	ldr	r3, [pc, #216]	; (800417c <UART_SetConfig+0x2d4>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040b0:	441c      	add	r4, r3
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80040cc:	415b      	adcs	r3, r3
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6339      	str	r1, [r7, #48]	; 0x30
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800413a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413e:	f7fc fc8d 	bl	8000a5c <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x2d4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x2d4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 0207 	and.w	r2, r3, #7
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004170:	e105      	b.n	800437e <UART_SetConfig+0x4d6>
 8004172:	bf00      	nop
 8004174:	40011000 	.word	0x40011000
 8004178:	40011400 	.word	0x40011400
 800417c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800418a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004192:	4642      	mov	r2, r8
 8004194:	464b      	mov	r3, r9
 8004196:	1891      	adds	r1, r2, r2
 8004198:	6239      	str	r1, [r7, #32]
 800419a:	415b      	adcs	r3, r3
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a2:	4641      	mov	r1, r8
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	4649      	mov	r1, r9
 80041a8:	eb43 0501 	adc.w	r5, r3, r1
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	00eb      	lsls	r3, r5, #3
 80041b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ba:	00e2      	lsls	r2, r4, #3
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	18e3      	adds	r3, r4, r3
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c8:	464b      	mov	r3, r9
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ee:	4629      	mov	r1, r5
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4621      	mov	r1, r4
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004200:	f7fc fc2c 	bl	8000a5c <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b60      	ldr	r3, [pc, #384]	; (800438c <UART_SetConfig+0x4e4>)
 800420a:	fba3 2302 	umull	r2, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	011c      	lsls	r4, r3, #4
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	61b9      	str	r1, [r7, #24]
 800422c:	415b      	adcs	r3, r3
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	4641      	mov	r1, r8
 8004236:	1851      	adds	r1, r2, r1
 8004238:	6139      	str	r1, [r7, #16]
 800423a:	4649      	mov	r1, r9
 800423c:	414b      	adcs	r3, r1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800424c:	4659      	mov	r1, fp
 800424e:	00cb      	lsls	r3, r1, #3
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004256:	4651      	mov	r1, sl
 8004258:	00ca      	lsls	r2, r1, #3
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	4603      	mov	r3, r0
 8004260:	4642      	mov	r2, r8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004268:	464b      	mov	r3, r9
 800426a:	460a      	mov	r2, r1
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
 800427e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800428c:	4649      	mov	r1, r9
 800428e:	008b      	lsls	r3, r1, #2
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004296:	4641      	mov	r1, r8
 8004298:	008a      	lsls	r2, r1, #2
 800429a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429e:	f7fc fbdd 	bl	8000a5c <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <UART_SetConfig+0x4e4>)
 80042a8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2164      	movs	r1, #100	; 0x64
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	3332      	adds	r3, #50	; 0x32
 80042ba:	4a34      	ldr	r2, [pc, #208]	; (800438c <UART_SetConfig+0x4e4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c6:	441c      	add	r4, r3
 80042c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042cc:	2200      	movs	r2, #0
 80042ce:	673b      	str	r3, [r7, #112]	; 0x70
 80042d0:	677a      	str	r2, [r7, #116]	; 0x74
 80042d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d6:	4642      	mov	r2, r8
 80042d8:	464b      	mov	r3, r9
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	415b      	adcs	r3, r3
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e6:	4641      	mov	r1, r8
 80042e8:	1851      	adds	r1, r2, r1
 80042ea:	6039      	str	r1, [r7, #0]
 80042ec:	4649      	mov	r1, r9
 80042ee:	414b      	adcs	r3, r1
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fe:	4659      	mov	r1, fp
 8004300:	00cb      	lsls	r3, r1, #3
 8004302:	4651      	mov	r1, sl
 8004304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004308:	4651      	mov	r1, sl
 800430a:	00ca      	lsls	r2, r1, #3
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	4603      	mov	r3, r0
 8004312:	4642      	mov	r2, r8
 8004314:	189b      	adds	r3, r3, r2
 8004316:	66bb      	str	r3, [r7, #104]	; 0x68
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	663b      	str	r3, [r7, #96]	; 0x60
 800432c:	667a      	str	r2, [r7, #100]	; 0x64
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800433a:	4649      	mov	r1, r9
 800433c:	008b      	lsls	r3, r1, #2
 800433e:	4641      	mov	r1, r8
 8004340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004344:	4641      	mov	r1, r8
 8004346:	008a      	lsls	r2, r1, #2
 8004348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800434c:	f7fc fb86 	bl	8000a5c <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <UART_SetConfig+0x4e4>)
 8004356:	fba3 1302 	umull	r1, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	; 0x32
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <UART_SetConfig+0x4e4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4422      	add	r2, r4
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	bf00      	nop
 8004380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800439e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a2:	2b84      	cmp	r3, #132	; 0x84
 80043a4:	d005      	beq.n	80043b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	3303      	adds	r3, #3
 80043b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043c4:	f000 fade 	bl	8004984 <vTaskStartScheduler>
  
  return osOK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	bd80      	pop	{r7, pc}

080043ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d0:	b089      	sub	sp, #36	; 0x24
 80043d2:	af04      	add	r7, sp, #16
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <osThreadCreate+0x54>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685c      	ldr	r4, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681d      	ldr	r5, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691e      	ldr	r6, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ffc8 	bl	8004390 <makeFreeRtosPriority>
 8004400:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800440a:	9202      	str	r2, [sp, #8]
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	9100      	str	r1, [sp, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4632      	mov	r2, r6
 8004414:	4629      	mov	r1, r5
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f8ed 	bl	80045f6 <xTaskCreateStatic>
 800441c:	4603      	mov	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e01c      	b.n	800445c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685c      	ldr	r4, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800442e:	b29e      	uxth	r6, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ffaa 	bl	8004390 <makeFreeRtosPriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f107 030c 	add.w	r3, r7, #12
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	9200      	str	r2, [sp, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4632      	mov	r2, r6
 800444a:	4629      	mov	r1, r5
 800444c:	4620      	mov	r0, r4
 800444e:	f000 f92f 	bl	80046b0 <xTaskCreate>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800445c:	68fb      	ldr	r3, [r7, #12]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004466 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <osDelay+0x16>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	e000      	b.n	800447e <osDelay+0x18>
 800447c:	2301      	movs	r3, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fa4c 	bl	800491c <vTaskDelay>
  
  return osOK;
 8004484:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f103 0208 	add.w	r2, r3, #8
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f103 0208 	add.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 0208 	add.w	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d103      	bne.n	8004550 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e00c      	b.n	800456a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3308      	adds	r3, #8
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	e002      	b.n	800455e <vListInsert+0x2e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d2f6      	bcs.n	8004558 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6892      	ldr	r2, [r2, #8]
 80045b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6852      	ldr	r2, [r2, #4]
 80045c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d103      	bne.n	80045d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b08e      	sub	sp, #56	; 0x38
 80045fa:	af04      	add	r7, sp, #16
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <xTaskCreateStatic+0x46>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61fb      	str	r3, [r7, #28]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800463c:	2354      	movs	r3, #84	; 0x54
 800463e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b54      	cmp	r3, #84	; 0x54
 8004644:	d00a      	beq.n	800465c <xTaskCreateStatic+0x66>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	61bb      	str	r3, [r7, #24]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800465c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <xTaskCreateStatic+0xac>
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01b      	beq.n	80046a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004672:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800467c:	2300      	movs	r3, #0
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f850 	bl	800473a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800469a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800469c:	f000 f8d4 	bl	8004848 <prvAddNewTaskToReadyList>
 80046a0:	e001      	b.n	80046a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046a6:	697b      	ldr	r3, [r7, #20]
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fee7 	bl	8005498 <pvPortMalloc>
 80046ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046d2:	2054      	movs	r0, #84	; 0x54
 80046d4:	f000 fee0 	bl	8005498 <pvPortMalloc>
 80046d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
 80046e6:	e005      	b.n	80046f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046e8:	6978      	ldr	r0, [r7, #20]
 80046ea:	f000 ffa1 	bl	8005630 <vPortFree>
 80046ee:	e001      	b.n	80046f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	2300      	movs	r3, #0
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	9302      	str	r3, [sp, #8]
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f80e 	bl	800473a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800471e:	69f8      	ldr	r0, [r7, #28]
 8004720:	f000 f892 	bl	8004848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e002      	b.n	8004730 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004730:	69bb      	ldr	r3, [r7, #24]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004752:	3b01      	subs	r3, #1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f023 0307 	bic.w	r3, r3, #7
 8004760:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <prvInitialiseNewTask+0x48>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	617b      	str	r3, [r7, #20]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01f      	beq.n	80047c8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e012      	b.n	80047b4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	7819      	ldrb	r1, [r3, #0]
 8004796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	3334      	adds	r3, #52	; 0x34
 800479e:	460a      	mov	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d9e9      	bls.n	800478e <prvInitialiseNewTask+0x54>
 80047ba:	e000      	b.n	80047be <prvInitialiseNewTask+0x84>
			{
				break;
 80047bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c6:	e003      	b.n	80047d0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d901      	bls.n	80047da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d6:	2306      	movs	r3, #6
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fe6c 	bl	80044ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	3318      	adds	r3, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fe67 	bl	80044ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004804:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	f1c3 0207 	rsb	r2, r3, #7
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	69b8      	ldr	r0, [r7, #24]
 800482a:	f000 fc23 	bl	8005074 <pxPortInitialiseStack>
 800482e:	4602      	mov	r2, r0
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004840:	bf00      	nop
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004850:	f000 fd40 	bl	80052d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004854:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <prvAddNewTaskToReadyList+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <prvAddNewTaskToReadyList+0xb8>)
 800485c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <prvAddNewTaskToReadyList+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004866:	4a27      	ldr	r2, [pc, #156]	; (8004904 <prvAddNewTaskToReadyList+0xbc>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <prvAddNewTaskToReadyList+0xb8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d110      	bne.n	8004896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004874:	f000 fabc 	bl	8004df0 <prvInitialiseTaskLists>
 8004878:	e00d      	b.n	8004896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <prvAddNewTaskToReadyList+0xc0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <prvAddNewTaskToReadyList+0xbc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	429a      	cmp	r2, r3
 800488e:	d802      	bhi.n	8004896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004890:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <prvAddNewTaskToReadyList+0xbc>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <prvAddNewTaskToReadyList+0xc4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <prvAddNewTaskToReadyList+0xc4>)
 800489e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <prvAddNewTaskToReadyList+0xc8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	4a18      	ldr	r2, [pc, #96]	; (8004910 <prvAddNewTaskToReadyList+0xc8>)
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <prvAddNewTaskToReadyList+0xcc>)
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7ff fe0d 	bl	80044e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048ce:	f000 fd31 	bl	8005334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <prvAddNewTaskToReadyList+0xc0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvAddNewTaskToReadyList+0xbc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d207      	bcs.n	80048f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <prvAddNewTaskToReadyList+0xd0>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	200005a4 	.word	0x200005a4
 8004904:	200004a4 	.word	0x200004a4
 8004908:	200005b0 	.word	0x200005b0
 800490c:	200005c0 	.word	0x200005c0
 8004910:	200005ac 	.word	0x200005ac
 8004914:	200004a8 	.word	0x200004a8
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <vTaskDelay+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <vTaskDelay+0x30>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60bb      	str	r3, [r7, #8]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800494c:	f000 f87a 	bl	8004a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004950:	2100      	movs	r1, #0
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fb28 	bl	8004fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004958:	f000 f882 	bl	8004a60 <xTaskResumeAll>
 800495c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <vTaskDelay+0x64>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200005cc 	.word	0x200005cc
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004992:	463a      	mov	r2, r7
 8004994:	1d39      	adds	r1, r7, #4
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc f9e0 	bl	8000d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	9202      	str	r2, [sp, #8]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	460a      	mov	r2, r1
 80049b2:	491e      	ldr	r1, [pc, #120]	; (8004a2c <vTaskStartScheduler+0xa8>)
 80049b4:	481e      	ldr	r0, [pc, #120]	; (8004a30 <vTaskStartScheduler+0xac>)
 80049b6:	f7ff fe1e 	bl	80045f6 <xTaskCreateStatic>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <vTaskStartScheduler+0xb0>)
 80049be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <vTaskStartScheduler+0xb0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049c8:	2301      	movs	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e001      	b.n	80049d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d116      	bne.n	8004a06 <vTaskStartScheduler+0x82>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	613b      	str	r3, [r7, #16]
}
 80049ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <vTaskStartScheduler+0xb4>)
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <vTaskStartScheduler+0xb8>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <vTaskStartScheduler+0xbc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a00:	f000 fbc6 	bl	8005190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a04:	e00e      	b.n	8004a24 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d10a      	bne.n	8004a24 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <vTaskStartScheduler+0x9e>
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	080061f4 	.word	0x080061f4
 8004a30:	08004dc1 	.word	0x08004dc1
 8004a34:	200005c8 	.word	0x200005c8
 8004a38:	200005c4 	.word	0x200005c4
 8004a3c:	200005b0 	.word	0x200005b0
 8004a40:	200005a8 	.word	0x200005a8

08004a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	200005cc 	.word	0x200005cc

08004a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	603b      	str	r3, [r7, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8c:	f000 fc22 	bl	80052d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d161      	bne.n	8004b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa2:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <xTaskResumeAll+0x118>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d05d      	beq.n	8004b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aaa:	e02e      	b.n	8004b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fd72 	bl	80045a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fd6d 	bl	80045a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <xTaskResumeAll+0x120>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <xTaskResumeAll+0x120>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <xTaskResumeAll+0x124>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff fcf9 	bl	80044e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <xTaskResumeAll+0x128>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cc      	bne.n	8004aac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b18:	f000 fa08 	bl	8004f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b28:	f000 f836 	bl	8004b98 <xTaskIncrementTick>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f1      	bne.n	8004b28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <xTaskResumeAll+0x134>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f000 fbe5 	bl	8005334 <vPortExitCritical>

	return xAlreadyYielded;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	200005cc 	.word	0x200005cc
 8004b78:	200005a4 	.word	0x200005a4
 8004b7c:	20000564 	.word	0x20000564
 8004b80:	200005ac 	.word	0x200005ac
 8004b84:	200004a8 	.word	0x200004a8
 8004b88:	200004a4 	.word	0x200004a4
 8004b8c:	200005b8 	.word	0x200005b8
 8004b90:	200005b4 	.word	0x200005b4
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <xTaskIncrementTick+0x144>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 808e 	bne.w	8004cc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bac:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <xTaskIncrementTick+0x148>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <xTaskIncrementTick+0x148>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d120      	bne.n	8004c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc0:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	603b      	str	r3, [r7, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <xTaskIncrementTick+0x46>
 8004be0:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3e      	ldr	r2, [pc, #248]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4a3e      	ldr	r2, [pc, #248]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	4a3c      	ldr	r2, [pc, #240]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	f000 f995 	bl	8004f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d348      	bcc.n	8004c9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c16:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	601a      	str	r2, [r3, #0]
					break;
 8004c1e:	e03e      	b.n	8004c9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d203      	bcs.n	8004c40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c38:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c3e:	e02e      	b.n	8004c9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fcac 	bl	80045a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3318      	adds	r3, #24
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fca3 	bl	80045a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7ff fc2f 	bl	80044e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3b9      	bcc.n	8004c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9c:	e7b6      	b.n	8004c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4914      	ldr	r1, [pc, #80]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d901      	bls.n	8004cba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <xTaskIncrementTick+0x168>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e004      	b.n	8004cd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004cd0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cd2:	697b      	ldr	r3, [r7, #20]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200005cc 	.word	0x200005cc
 8004ce0:	200005a8 	.word	0x200005a8
 8004ce4:	2000055c 	.word	0x2000055c
 8004ce8:	20000560 	.word	0x20000560
 8004cec:	200005bc 	.word	0x200005bc
 8004cf0:	200005c4 	.word	0x200005c4
 8004cf4:	200005ac 	.word	0x200005ac
 8004cf8:	200004a8 	.word	0x200004a8
 8004cfc:	200004a4 	.word	0x200004a4
 8004d00:	200005b8 	.word	0x200005b8
 8004d04:	200005b4 	.word	0x200005b4

08004d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d0e:	4b27      	ldr	r3, [pc, #156]	; (8004dac <vTaskSwitchContext+0xa4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <vTaskSwitchContext+0xa8>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d1c:	e03f      	b.n	8004d9e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <vTaskSwitchContext+0xa8>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d24:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <vTaskSwitchContext+0xac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d32:	7afb      	ldrb	r3, [r7, #11]
 8004d34:	f1c3 031f 	rsb	r3, r3, #31
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	491f      	ldr	r1, [pc, #124]	; (8004db8 <vTaskSwitchContext+0xb0>)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <vTaskSwitchContext+0x5a>
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <vTaskSwitchContext+0xb0>)
 8004d70:	4413      	add	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	3308      	adds	r3, #8
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d104      	bne.n	8004d94 <vTaskSwitchContext+0x8c>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <vTaskSwitchContext+0xb4>)
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	200005cc 	.word	0x200005cc
 8004db0:	200005b8 	.word	0x200005b8
 8004db4:	200005ac 	.word	0x200005ac
 8004db8:	200004a8 	.word	0x200004a8
 8004dbc:	200004a4 	.word	0x200004a4

08004dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dc8:	f000 f852 	bl	8004e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvIdleTask+0x28>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d9f9      	bls.n	8004dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <prvIdleTask+0x2c>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004de4:	e7f0      	b.n	8004dc8 <prvIdleTask+0x8>
 8004de6:	bf00      	nop
 8004de8:	200004a8 	.word	0x200004a8
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <prvInitialiseTaskLists+0x60>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fb3f 	bl	800448e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e1c:	480d      	ldr	r0, [pc, #52]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e1e:	f7ff fb36 	bl	800448e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e22:	480d      	ldr	r0, [pc, #52]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e24:	f7ff fb33 	bl	800448e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e2a:	f7ff fb30 	bl	800448e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e2e:	480c      	ldr	r0, [pc, #48]	; (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e30:	f7ff fb2d 	bl	800448e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e34:	480b      	ldr	r0, [pc, #44]	; (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e36:	f7ff fb2a 	bl	800448e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e3c:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200004a8 	.word	0x200004a8
 8004e54:	20000534 	.word	0x20000534
 8004e58:	20000548 	.word	0x20000548
 8004e5c:	20000564 	.word	0x20000564
 8004e60:	20000578 	.word	0x20000578
 8004e64:	20000590 	.word	0x20000590
 8004e68:	2000055c 	.word	0x2000055c
 8004e6c:	20000560 	.word	0x20000560

08004e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e76:	e019      	b.n	8004eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e78:	f000 fa2c 	bl	80052d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fb8a 	bl	80045a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ea2:	f000 fa47 	bl	8005334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f810 	bl	8004ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e1      	bne.n	8004e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000578 	.word	0x20000578
 8004ec4:	200005a4 	.word	0x200005a4
 8004ec8:	2000058c 	.word	0x2000058c

08004ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fba4 	bl	8005630 <vPortFree>
				vPortFree( pxTCB );
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fba1 	bl	8005630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eee:	e018      	b.n	8004f22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d103      	bne.n	8004f02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fb98 	bl	8005630 <vPortFree>
	}
 8004f00:	e00f      	b.n	8004f22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d00a      	beq.n	8004f22 <prvDeleteTCB+0x56>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <prvDeleteTCB+0x54>
	}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f44:	e008      	b.n	8004f58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	2000055c 	.word	0x2000055c
 8004f68:	200005c4 	.word	0x200005c4

08004f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <xTaskGetSchedulerState+0x34>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e008      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <xTaskGetSchedulerState+0x38>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e001      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f92:	687b      	ldr	r3, [r7, #4]
	}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	200005b0 	.word	0x200005b0
 8004fa4:	200005cc 	.word	0x200005cc

08004fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb8:	4b28      	ldr	r3, [pc, #160]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff faef 	bl	80045a2 <uxListRemove>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	4a20      	ldr	r2, [pc, #128]	; (8005060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d10a      	bne.n	8005000 <prvAddCurrentTaskToDelayedList+0x58>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	481a      	ldr	r0, [pc, #104]	; (8005064 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ffa:	f7ff fa75 	bl	80044e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ffe:	e026      	b.n	800504e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d209      	bcs.n	800502c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7ff fa83 	bl	8004530 <vListInsert>
}
 800502a:	e010      	b.n	800504e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <prvAddCurrentTaskToDelayedList+0xc4>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7ff fa79 	bl	8004530 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d202      	bcs.n	800504e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200005a8 	.word	0x200005a8
 800505c:	200004a4 	.word	0x200004a4
 8005060:	200005ac 	.word	0x200005ac
 8005064:	20000590 	.word	0x20000590
 8005068:	20000560 	.word	0x20000560
 800506c:	2000055c 	.word	0x2000055c
 8005070:	200005c4 	.word	0x200005c4

08005074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b04      	subs	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800508c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <pxPortInitialiseStack+0x64>)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b14      	subs	r3, #20
 80050ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f06f 0202 	mvn.w	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b20      	subs	r3, #32
 80050c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	080050dd 	.word	0x080050dd

080050dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <prvTaskExitError+0x54>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d00a      	beq.n	8005106 <prvTaskExitError+0x2a>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <prvTaskExitError+0x28>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60bb      	str	r3, [r7, #8]
}
 8005118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800511a:	bf00      	nop
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0fc      	beq.n	800511c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	2000000c 	.word	0x2000000c
	...

08005140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <pxCurrentTCBConst2>)
 8005142:	6819      	ldr	r1, [r3, #0]
 8005144:	6808      	ldr	r0, [r1, #0]
 8005146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	f380 8809 	msr	PSP, r0
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8811 	msr	BASEPRI, r0
 800515a:	4770      	bx	lr
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst2>:
 8005160:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005168:	4808      	ldr	r0, [pc, #32]	; (800518c <prvPortStartFirstTask+0x24>)
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f380 8808 	msr	MSP, r0
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8814 	msr	CONTROL, r0
 800517a:	b662      	cpsie	i
 800517c:	b661      	cpsie	f
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	df00      	svc	0
 8005188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800518a:	bf00      	nop
 800518c:	e000ed08 	.word	0xe000ed08

08005190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005196:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <xPortStartScheduler+0x120>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a46      	ldr	r2, [pc, #280]	; (80052b4 <xPortStartScheduler+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10a      	bne.n	80051b6 <xPortStartScheduler+0x26>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	613b      	str	r3, [r7, #16]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051b6:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <xPortStartScheduler+0x120>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3f      	ldr	r2, [pc, #252]	; (80052b8 <xPortStartScheduler+0x128>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10a      	bne.n	80051d6 <xPortStartScheduler+0x46>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60fb      	str	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <xPortStartScheduler+0x12c>)
 80051d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	22ff      	movs	r2, #255	; 0xff
 80051e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <xPortStartScheduler+0x130>)
 80051fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051fe:	4b31      	ldr	r3, [pc, #196]	; (80052c4 <xPortStartScheduler+0x134>)
 8005200:	2207      	movs	r2, #7
 8005202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005204:	e009      	b.n	800521a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005206:	4b2f      	ldr	r3, [pc, #188]	; (80052c4 <xPortStartScheduler+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <xPortStartScheduler+0x134>)
 800520e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d0ef      	beq.n	8005206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005226:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <xPortStartScheduler+0x134>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1c3 0307 	rsb	r3, r3, #7
 800522e:	2b04      	cmp	r3, #4
 8005230:	d00a      	beq.n	8005248 <xPortStartScheduler+0xb8>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005248:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <xPortStartScheduler+0x134>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <xPortStartScheduler+0x134>)
 8005250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <xPortStartScheduler+0x134>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <xPortStartScheduler+0x134>)
 800525c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <xPortStartScheduler+0x138>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <xPortStartScheduler+0x138>)
 800526c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <xPortStartScheduler+0x138>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <xPortStartScheduler+0x138>)
 8005278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800527c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800527e:	f000 f8dd 	bl	800543c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <xPortStartScheduler+0x13c>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005288:	f000 f8fc 	bl	8005484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <xPortStartScheduler+0x140>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0f      	ldr	r2, [pc, #60]	; (80052d0 <xPortStartScheduler+0x140>)
 8005292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005298:	f7ff ff66 	bl	8005168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800529c:	f7ff fd34 	bl	8004d08 <vTaskSwitchContext>
	prvTaskExitError();
 80052a0:	f7ff ff1c 	bl	80050dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000ed00 	.word	0xe000ed00
 80052b4:	410fc271 	.word	0x410fc271
 80052b8:	410fc270 	.word	0x410fc270
 80052bc:	e000e400 	.word	0xe000e400
 80052c0:	200005d0 	.word	0x200005d0
 80052c4:	200005d4 	.word	0x200005d4
 80052c8:	e000ed20 	.word	0xe000ed20
 80052cc:	2000000c 	.word	0x2000000c
 80052d0:	e000ef34 	.word	0xe000ef34

080052d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	607b      	str	r3, [r7, #4]
}
 80052ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <vPortEnterCritical+0x58>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a0d      	ldr	r2, [pc, #52]	; (800532c <vPortEnterCritical+0x58>)
 80052f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <vPortEnterCritical+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10f      	bne.n	8005320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortEnterCritical+0x5c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <vPortEnterCritical+0x4c>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	603b      	str	r3, [r7, #0]
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <vPortEnterCritical+0x4a>
	}
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	2000000c 	.word	0x2000000c
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <vPortExitCritical+0x50>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <vPortExitCritical+0x24>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <vPortExitCritical+0x50>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <vPortExitCritical+0x50>)
 8005360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <vPortExitCritical+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d105      	bne.n	8005376 <vPortExitCritical+0x42>
 800536a:	2300      	movs	r3, #0
 800536c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c
	...

08005390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005390:	f3ef 8009 	mrs	r0, PSP
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <pxCurrentTCBConst>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f01e 0f10 	tst.w	lr, #16
 80053a0:	bf08      	it	eq
 80053a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	6010      	str	r0, [r2, #0]
 80053ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053b4:	f380 8811 	msr	BASEPRI, r0
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f7ff fca2 	bl	8004d08 <vTaskSwitchContext>
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	f380 8811 	msr	BASEPRI, r0
 80053cc:	bc09      	pop	{r0, r3}
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	6808      	ldr	r0, [r1, #0]
 80053d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d6:	f01e 0f10 	tst.w	lr, #16
 80053da:	bf08      	it	eq
 80053dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053e0:	f380 8809 	msr	PSP, r0
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst>:
 80053f0:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005412:	f7ff fbc1 	bl	8004b98 <xTaskIncrementTick>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <xPortSysTickHandler+0x40>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f383 8811 	msr	BASEPRI, r3
}
 800542e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <vPortSetupTimerInterrupt+0x38>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <vPortSetupTimerInterrupt+0x3c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <vPortSetupTimerInterrupt+0x40>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <vPortSetupTimerInterrupt+0x44>)
 800545a:	3b01      	subs	r3, #1
 800545c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e010 	.word	0xe000e010
 8005474:	e000e018 	.word	0xe000e018
 8005478:	20000000 	.word	0x20000000
 800547c:	10624dd3 	.word	0x10624dd3
 8005480:	e000e014 	.word	0xe000e014

08005484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005494 <vPortEnableVFP+0x10>
 8005488:	6801      	ldr	r1, [r0, #0]
 800548a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800548e:	6001      	str	r1, [r0, #0]
 8005490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005492:	bf00      	nop
 8005494:	e000ed88 	.word	0xe000ed88

08005498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054a4:	f7ff face 	bl	8004a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054a8:	4b5b      	ldr	r3, [pc, #364]	; (8005618 <pvPortMalloc+0x180>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b0:	f000 f920 	bl	80056f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <pvPortMalloc+0x184>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 8093 	bne.w	80055e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01d      	beq.n	8005504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054c8:	2208      	movs	r2, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0x6c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <pvPortMalloc+0x150>
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d869      	bhi.n	80055e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005514:	4b43      	ldr	r3, [pc, #268]	; (8005624 <pvPortMalloc+0x18c>)
 8005516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <pvPortMalloc+0x18c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551e:	e004      	b.n	800552a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <pvPortMalloc+0xa4>
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f1      	bne.n	8005520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <pvPortMalloc+0x180>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d050      	beq.n	80055e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2208      	movs	r2, #8
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2308      	movs	r3, #8
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d91f      	bls.n	80055a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <pvPortMalloc+0xf8>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a2:	69b8      	ldr	r0, [r7, #24]
 80055a4:	f000 f908 	bl	80057b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <pvPortMalloc+0x188>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <pvPortMalloc+0x188>)
 80055b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <pvPortMalloc+0x188>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <pvPortMalloc+0x190>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <pvPortMalloc+0x190>)
 80055c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <pvPortMalloc+0x184>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x194>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a11      	ldr	r2, [pc, #68]	; (800562c <pvPortMalloc+0x194>)
 80055e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055e8:	f7ff fa3a 	bl	8004a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <pvPortMalloc+0x174>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <pvPortMalloc+0x172>
	return pvReturn;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	200041e0 	.word	0x200041e0
 800561c:	200041f4 	.word	0x200041f4
 8005620:	200041e4 	.word	0x200041e4
 8005624:	200041d8 	.word	0x200041d8
 8005628:	200041e8 	.word	0x200041e8
 800562c:	200041ec 	.word	0x200041ec

08005630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04d      	beq.n	80056de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005642:	2308      	movs	r3, #8
 8005644:	425b      	negs	r3, r3
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <vPortFree+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <vPortFree+0x44>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <vPortFree+0x62>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <vPortFree+0xb8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vPortFree+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056b8:	f7ff f9c4 	bl	8004a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <vPortFree+0xbc>)
 80056c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f000 f874 	bl	80057b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <vPortFree+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <vPortFree+0xc0>)
 80056d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056da:	f7ff f9c1 	bl	8004a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200041f4 	.word	0x200041f4
 80056ec:	200041e4 	.word	0x200041e4
 80056f0:	200041f0 	.word	0x200041f0

080056f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <prvHeapInit+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3307      	adds	r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <prvHeapInit+0xac>)
 8005724:	4413      	add	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <prvHeapInit+0xb0>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <prvHeapInit+0xb0>)
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005740:	2208      	movs	r2, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <prvHeapInit+0xb4>)
 8005754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <prvHeapInit+0xb4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <prvHeapInit+0xb4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvHeapInit+0xb4>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <prvHeapInit+0xb8>)
 8005782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvHeapInit+0xbc>)
 800578a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvHeapInit+0xc0>)
 800578e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	200005d8 	.word	0x200005d8
 80057a4:	200041d8 	.word	0x200041d8
 80057a8:	200041e0 	.word	0x200041e0
 80057ac:	200041e8 	.word	0x200041e8
 80057b0:	200041e4 	.word	0x200041e4
 80057b4:	200041f4 	.word	0x200041f4

080057b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <prvInsertBlockIntoFreeList+0xac>)
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <prvInsertBlockIntoFreeList+0x14>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d8f7      	bhi.n	80057c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d108      	bne.n	80057fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d118      	bne.n	8005840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d00d      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	441a      	add	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e008      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e003      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d002      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	200041d8 	.word	0x200041d8
 8005868:	200041e0 	.word	0x200041e0

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000010 	.word	0x20000010

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f000 fc8e 	bl	80061ac <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08006250 	.word	0x08006250
 80058b4:	08006250 	.word	0x08006250
 80058b8:	08006250 	.word	0x08006250
 80058bc:	08006254 	.word	0x08006254

080058c0 <memcpy>:
 80058c0:	440a      	add	r2, r1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	4770      	bx	lr
 80058cc:	b510      	push	{r4, lr}
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d1f9      	bne.n	80058ce <memcpy+0xe>
 80058da:	bd10      	pop	{r4, pc}

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <siprintf>:
 80058ec:	b40e      	push	{r1, r2, r3}
 80058ee:	b500      	push	{lr}
 80058f0:	b09c      	sub	sp, #112	; 0x70
 80058f2:	ab1d      	add	r3, sp, #116	; 0x74
 80058f4:	9002      	str	r0, [sp, #8]
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058fc:	4809      	ldr	r0, [pc, #36]	; (8005924 <siprintf+0x38>)
 80058fe:	9107      	str	r1, [sp, #28]
 8005900:	9104      	str	r1, [sp, #16]
 8005902:	4909      	ldr	r1, [pc, #36]	; (8005928 <siprintf+0x3c>)
 8005904:	f853 2b04 	ldr.w	r2, [r3], #4
 8005908:	9105      	str	r1, [sp, #20]
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	a902      	add	r1, sp, #8
 8005910:	f000 f868 	bl	80059e4 <_svfiprintf_r>
 8005914:	9b02      	ldr	r3, [sp, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	b01c      	add	sp, #112	; 0x70
 800591c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005920:	b003      	add	sp, #12
 8005922:	4770      	bx	lr
 8005924:	20000010 	.word	0x20000010
 8005928:	ffff0208 	.word	0xffff0208

0800592c <__ssputs_r>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	688e      	ldr	r6, [r1, #8]
 8005932:	429e      	cmp	r6, r3
 8005934:	4682      	mov	sl, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4690      	mov	r8, r2
 800593a:	461f      	mov	r7, r3
 800593c:	d838      	bhi.n	80059b0 <__ssputs_r+0x84>
 800593e:	898a      	ldrh	r2, [r1, #12]
 8005940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005944:	d032      	beq.n	80059ac <__ssputs_r+0x80>
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	6909      	ldr	r1, [r1, #16]
 800594a:	eba5 0901 	sub.w	r9, r5, r1
 800594e:	6965      	ldr	r5, [r4, #20]
 8005950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005958:	3301      	adds	r3, #1
 800595a:	444b      	add	r3, r9
 800595c:	106d      	asrs	r5, r5, #1
 800595e:	429d      	cmp	r5, r3
 8005960:	bf38      	it	cc
 8005962:	461d      	movcc	r5, r3
 8005964:	0553      	lsls	r3, r2, #21
 8005966:	d531      	bpl.n	80059cc <__ssputs_r+0xa0>
 8005968:	4629      	mov	r1, r5
 800596a:	f000 fb55 	bl	8006018 <_malloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	b950      	cbnz	r0, 8005988 <__ssputs_r+0x5c>
 8005972:	230c      	movs	r3, #12
 8005974:	f8ca 3000 	str.w	r3, [sl]
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	464a      	mov	r2, r9
 800598c:	f7ff ff98 	bl	80058c0 <memcpy>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599a:	81a3      	strh	r3, [r4, #12]
 800599c:	6126      	str	r6, [r4, #16]
 800599e:	6165      	str	r5, [r4, #20]
 80059a0:	444e      	add	r6, r9
 80059a2:	eba5 0509 	sub.w	r5, r5, r9
 80059a6:	6026      	str	r6, [r4, #0]
 80059a8:	60a5      	str	r5, [r4, #8]
 80059aa:	463e      	mov	r6, r7
 80059ac:	42be      	cmp	r6, r7
 80059ae:	d900      	bls.n	80059b2 <__ssputs_r+0x86>
 80059b0:	463e      	mov	r6, r7
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	4632      	mov	r2, r6
 80059b6:	4641      	mov	r1, r8
 80059b8:	f000 faa8 	bl	8005f0c <memmove>
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	1b9b      	subs	r3, r3, r6
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	4433      	add	r3, r6
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2000      	movs	r0, #0
 80059ca:	e7db      	b.n	8005984 <__ssputs_r+0x58>
 80059cc:	462a      	mov	r2, r5
 80059ce:	f000 fb97 	bl	8006100 <_realloc_r>
 80059d2:	4606      	mov	r6, r0
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d1e1      	bne.n	800599c <__ssputs_r+0x70>
 80059d8:	6921      	ldr	r1, [r4, #16]
 80059da:	4650      	mov	r0, sl
 80059dc:	f000 fab0 	bl	8005f40 <_free_r>
 80059e0:	e7c7      	b.n	8005972 <__ssputs_r+0x46>
	...

080059e4 <_svfiprintf_r>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	4698      	mov	r8, r3
 80059ea:	898b      	ldrh	r3, [r1, #12]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	b09d      	sub	sp, #116	; 0x74
 80059f0:	4607      	mov	r7, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	d50e      	bpl.n	8005a16 <_svfiprintf_r+0x32>
 80059f8:	690b      	ldr	r3, [r1, #16]
 80059fa:	b963      	cbnz	r3, 8005a16 <_svfiprintf_r+0x32>
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	f000 fb0b 	bl	8006018 <_malloc_r>
 8005a02:	6028      	str	r0, [r5, #0]
 8005a04:	6128      	str	r0, [r5, #16]
 8005a06:	b920      	cbnz	r0, 8005a12 <_svfiprintf_r+0x2e>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e0d1      	b.n	8005bb6 <_svfiprintf_r+0x1d2>
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	616b      	str	r3, [r5, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a24:	2330      	movs	r3, #48	; 0x30
 8005a26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bd0 <_svfiprintf_r+0x1ec>
 8005a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2e:	f04f 0901 	mov.w	r9, #1
 8005a32:	4623      	mov	r3, r4
 8005a34:	469a      	mov	sl, r3
 8005a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3a:	b10a      	cbz	r2, 8005a40 <_svfiprintf_r+0x5c>
 8005a3c:	2a25      	cmp	r2, #37	; 0x25
 8005a3e:	d1f9      	bne.n	8005a34 <_svfiprintf_r+0x50>
 8005a40:	ebba 0b04 	subs.w	fp, sl, r4
 8005a44:	d00b      	beq.n	8005a5e <_svfiprintf_r+0x7a>
 8005a46:	465b      	mov	r3, fp
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ff6d 	bl	800592c <__ssputs_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	f000 80aa 	beq.w	8005bac <_svfiprintf_r+0x1c8>
 8005a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5a:	445a      	add	r2, fp
 8005a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a2 	beq.w	8005bac <_svfiprintf_r+0x1c8>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a72:	f10a 0a01 	add.w	sl, sl, #1
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	9307      	str	r3, [sp, #28]
 8005a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a80:	4654      	mov	r4, sl
 8005a82:	2205      	movs	r2, #5
 8005a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a88:	4851      	ldr	r0, [pc, #324]	; (8005bd0 <_svfiprintf_r+0x1ec>)
 8005a8a:	f7fa fba9 	bl	80001e0 <memchr>
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	b9d8      	cbnz	r0, 8005aca <_svfiprintf_r+0xe6>
 8005a92:	06d0      	lsls	r0, r2, #27
 8005a94:	bf44      	itt	mi
 8005a96:	2320      	movmi	r3, #32
 8005a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9c:	0711      	lsls	r1, r2, #28
 8005a9e:	bf44      	itt	mi
 8005aa0:	232b      	movmi	r3, #43	; 0x2b
 8005aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d015      	beq.n	8005ada <_svfiprintf_r+0xf6>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	4654      	mov	r4, sl
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abe:	3b30      	subs	r3, #48	; 0x30
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d94e      	bls.n	8005b62 <_svfiprintf_r+0x17e>
 8005ac4:	b1b0      	cbz	r0, 8005af4 <_svfiprintf_r+0x110>
 8005ac6:	9207      	str	r2, [sp, #28]
 8005ac8:	e014      	b.n	8005af4 <_svfiprintf_r+0x110>
 8005aca:	eba0 0308 	sub.w	r3, r0, r8
 8005ace:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	46a2      	mov	sl, r4
 8005ad8:	e7d2      	b.n	8005a80 <_svfiprintf_r+0x9c>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	1d19      	adds	r1, r3, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfbb      	ittet	lt
 8005ae6:	425b      	neglt	r3, r3
 8005ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8005aec:	9307      	strge	r3, [sp, #28]
 8005aee:	9307      	strlt	r3, [sp, #28]
 8005af0:	bfb8      	it	lt
 8005af2:	9204      	strlt	r2, [sp, #16]
 8005af4:	7823      	ldrb	r3, [r4, #0]
 8005af6:	2b2e      	cmp	r3, #46	; 0x2e
 8005af8:	d10c      	bne.n	8005b14 <_svfiprintf_r+0x130>
 8005afa:	7863      	ldrb	r3, [r4, #1]
 8005afc:	2b2a      	cmp	r3, #42	; 0x2a
 8005afe:	d135      	bne.n	8005b6c <_svfiprintf_r+0x188>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b10:	3402      	adds	r4, #2
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005be0 <_svfiprintf_r+0x1fc>
 8005b18:	7821      	ldrb	r1, [r4, #0]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	f7fa fb5f 	bl	80001e0 <memchr>
 8005b22:	b140      	cbz	r0, 8005b36 <_svfiprintf_r+0x152>
 8005b24:	2340      	movs	r3, #64	; 0x40
 8005b26:	eba0 000a 	sub.w	r0, r0, sl
 8005b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	4303      	orrs	r3, r0
 8005b32:	3401      	adds	r4, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3a:	4826      	ldr	r0, [pc, #152]	; (8005bd4 <_svfiprintf_r+0x1f0>)
 8005b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b40:	2206      	movs	r2, #6
 8005b42:	f7fa fb4d 	bl	80001e0 <memchr>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d038      	beq.n	8005bbc <_svfiprintf_r+0x1d8>
 8005b4a:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <_svfiprintf_r+0x1f4>)
 8005b4c:	bb1b      	cbnz	r3, 8005b96 <_svfiprintf_r+0x1b2>
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	3307      	adds	r3, #7
 8005b52:	f023 0307 	bic.w	r3, r3, #7
 8005b56:	3308      	adds	r3, #8
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	4433      	add	r3, r6
 8005b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b60:	e767      	b.n	8005a32 <_svfiprintf_r+0x4e>
 8005b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b66:	460c      	mov	r4, r1
 8005b68:	2001      	movs	r0, #1
 8005b6a:	e7a5      	b.n	8005ab8 <_svfiprintf_r+0xd4>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	3401      	adds	r4, #1
 8005b70:	9305      	str	r3, [sp, #20]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f04f 0c0a 	mov.w	ip, #10
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7e:	3a30      	subs	r2, #48	; 0x30
 8005b80:	2a09      	cmp	r2, #9
 8005b82:	d903      	bls.n	8005b8c <_svfiprintf_r+0x1a8>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0c5      	beq.n	8005b14 <_svfiprintf_r+0x130>
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	e7c3      	b.n	8005b14 <_svfiprintf_r+0x130>
 8005b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b90:	4604      	mov	r4, r0
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7f0      	b.n	8005b78 <_svfiprintf_r+0x194>
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <_svfiprintf_r+0x1f8>)
 8005b9e:	a904      	add	r1, sp, #16
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f3af 8000 	nop.w
 8005ba6:	1c42      	adds	r2, r0, #1
 8005ba8:	4606      	mov	r6, r0
 8005baa:	d1d6      	bne.n	8005b5a <_svfiprintf_r+0x176>
 8005bac:	89ab      	ldrh	r3, [r5, #12]
 8005bae:	065b      	lsls	r3, r3, #25
 8005bb0:	f53f af2c 	bmi.w	8005a0c <_svfiprintf_r+0x28>
 8005bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb6:	b01d      	add	sp, #116	; 0x74
 8005bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbc:	ab03      	add	r3, sp, #12
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <_svfiprintf_r+0x1f8>)
 8005bc4:	a904      	add	r1, sp, #16
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f000 f87a 	bl	8005cc0 <_printf_i>
 8005bcc:	e7eb      	b.n	8005ba6 <_svfiprintf_r+0x1c2>
 8005bce:	bf00      	nop
 8005bd0:	08006214 	.word	0x08006214
 8005bd4:	0800621e 	.word	0x0800621e
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800592d 	.word	0x0800592d
 8005be0:	0800621a 	.word	0x0800621a

08005be4 <_printf_common>:
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4616      	mov	r6, r2
 8005bea:	4699      	mov	r9, r3
 8005bec:	688a      	ldr	r2, [r1, #8]
 8005bee:	690b      	ldr	r3, [r1, #16]
 8005bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bfb8      	it	lt
 8005bf8:	4613      	movlt	r3, r2
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c00:	4607      	mov	r7, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	b10a      	cbz	r2, 8005c0a <_printf_common+0x26>
 8005c06:	3301      	adds	r3, #1
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	6833      	ldrmi	r3, [r6, #0]
 8005c12:	3302      	addmi	r3, #2
 8005c14:	6033      	strmi	r3, [r6, #0]
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	f015 0506 	ands.w	r5, r5, #6
 8005c1c:	d106      	bne.n	8005c2c <_printf_common+0x48>
 8005c1e:	f104 0a19 	add.w	sl, r4, #25
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	6832      	ldr	r2, [r6, #0]
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dc26      	bgt.n	8005c7a <_printf_common+0x96>
 8005c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c30:	1e13      	subs	r3, r2, #0
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	bf18      	it	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	0692      	lsls	r2, r2, #26
 8005c3a:	d42b      	bmi.n	8005c94 <_printf_common+0xb0>
 8005c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d01e      	beq.n	8005c88 <_printf_common+0xa4>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	68e5      	ldr	r5, [r4, #12]
 8005c4e:	6832      	ldr	r2, [r6, #0]
 8005c50:	f003 0306 	and.w	r3, r3, #6
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	bf08      	it	eq
 8005c58:	1aad      	subeq	r5, r5, r2
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	6922      	ldr	r2, [r4, #16]
 8005c5e:	bf0c      	ite	eq
 8005c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c64:	2500      	movne	r5, #0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfc4      	itt	gt
 8005c6a:	1a9b      	subgt	r3, r3, r2
 8005c6c:	18ed      	addgt	r5, r5, r3
 8005c6e:	2600      	movs	r6, #0
 8005c70:	341a      	adds	r4, #26
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d11a      	bne.n	8005cac <_printf_common+0xc8>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e008      	b.n	8005c8c <_printf_common+0xa8>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4638      	mov	r0, r7
 8005c82:	47c0      	blx	r8
 8005c84:	3001      	adds	r0, #1
 8005c86:	d103      	bne.n	8005c90 <_printf_common+0xac>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	3501      	adds	r5, #1
 8005c92:	e7c6      	b.n	8005c22 <_printf_common+0x3e>
 8005c94:	18e1      	adds	r1, r4, r3
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	2030      	movs	r0, #48	; 0x30
 8005c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c9e:	4422      	add	r2, r4
 8005ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca8:	3302      	adds	r3, #2
 8005caa:	e7c7      	b.n	8005c3c <_printf_common+0x58>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0e6      	beq.n	8005c88 <_printf_common+0xa4>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7d9      	b.n	8005c72 <_printf_common+0x8e>
	...

08005cc0 <_printf_i>:
 8005cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	7e0f      	ldrb	r7, [r1, #24]
 8005cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc8:	2f78      	cmp	r7, #120	; 0x78
 8005cca:	4691      	mov	r9, r2
 8005ccc:	4680      	mov	r8, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	469a      	mov	sl, r3
 8005cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cd6:	d807      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cd8:	2f62      	cmp	r7, #98	; 0x62
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x32>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	f000 80d8 	beq.w	8005e92 <_printf_i+0x1d2>
 8005ce2:	2f58      	cmp	r7, #88	; 0x58
 8005ce4:	f000 80a3 	beq.w	8005e2e <_printf_i+0x16e>
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf0:	e03a      	b.n	8005d68 <_printf_i+0xa8>
 8005cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cf6:	2b15      	cmp	r3, #21
 8005cf8:	d8f6      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cfa:	a101      	add	r1, pc, #4	; (adr r1, 8005d00 <_printf_i+0x40>)
 8005cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005ce9 	.word	0x08005ce9
 8005d0c:	08005ce9 	.word	0x08005ce9
 8005d10:	08005ce9 	.word	0x08005ce9
 8005d14:	08005ce9 	.word	0x08005ce9
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ce9 	.word	0x08005ce9
 8005d20:	08005ce9 	.word	0x08005ce9
 8005d24:	08005ce9 	.word	0x08005ce9
 8005d28:	08005ce9 	.word	0x08005ce9
 8005d2c:	08005e79 	.word	0x08005e79
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005e5b 	.word	0x08005e5b
 8005d38:	08005ce9 	.word	0x08005ce9
 8005d3c:	08005ce9 	.word	0x08005ce9
 8005d40:	08005e9b 	.word	0x08005e9b
 8005d44:	08005ce9 	.word	0x08005ce9
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005ce9 	.word	0x08005ce9
 8005d50:	08005ce9 	.word	0x08005ce9
 8005d54:	08005e63 	.word	0x08005e63
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0a3      	b.n	8005eb4 <_printf_i+0x1f4>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	6829      	ldr	r1, [r5, #0]
 8005d70:	0606      	lsls	r6, r0, #24
 8005d72:	f101 0304 	add.w	r3, r1, #4
 8005d76:	d50a      	bpl.n	8005d8e <_printf_i+0xce>
 8005d78:	680e      	ldr	r6, [r1, #0]
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	da03      	bge.n	8005d88 <_printf_i+0xc8>
 8005d80:	232d      	movs	r3, #45	; 0x2d
 8005d82:	4276      	negs	r6, r6
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	485e      	ldr	r0, [pc, #376]	; (8005f04 <_printf_i+0x244>)
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	e019      	b.n	8005dc2 <_printf_i+0x102>
 8005d8e:	680e      	ldr	r6, [r1, #0]
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d96:	bf18      	it	ne
 8005d98:	b236      	sxthne	r6, r6
 8005d9a:	e7ef      	b.n	8005d7c <_printf_i+0xbc>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	6029      	str	r1, [r5, #0]
 8005da4:	0601      	lsls	r1, r0, #24
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0xec>
 8005da8:	681e      	ldr	r6, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0xf2>
 8005dac:	0646      	lsls	r6, r0, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0xe8>
 8005db0:	881e      	ldrh	r6, [r3, #0]
 8005db2:	4854      	ldr	r0, [pc, #336]	; (8005f04 <_printf_i+0x244>)
 8005db4:	2f6f      	cmp	r7, #111	; 0x6f
 8005db6:	bf0c      	ite	eq
 8005db8:	2308      	moveq	r3, #8
 8005dba:	230a      	movne	r3, #10
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc2:	6865      	ldr	r5, [r4, #4]
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	bfa2      	ittt	ge
 8005dca:	6821      	ldrge	r1, [r4, #0]
 8005dcc:	f021 0104 	bicge.w	r1, r1, #4
 8005dd0:	6021      	strge	r1, [r4, #0]
 8005dd2:	b90e      	cbnz	r6, 8005dd8 <_printf_i+0x118>
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d04d      	beq.n	8005e74 <_printf_i+0x1b4>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dde:	fb03 6711 	mls	r7, r3, r1, r6
 8005de2:	5dc7      	ldrb	r7, [r0, r7]
 8005de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de8:	4637      	mov	r7, r6
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	460e      	mov	r6, r1
 8005dee:	d9f4      	bls.n	8005dda <_printf_i+0x11a>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d10b      	bne.n	8005e0c <_printf_i+0x14c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07de      	lsls	r6, r3, #31
 8005df8:	d508      	bpl.n	8005e0c <_printf_i+0x14c>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	6861      	ldr	r1, [r4, #4]
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	bfde      	ittt	le
 8005e02:	2330      	movle	r3, #48	; 0x30
 8005e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0c:	1b52      	subs	r2, r2, r5
 8005e0e:	6122      	str	r2, [r4, #16]
 8005e10:	f8cd a000 	str.w	sl, [sp]
 8005e14:	464b      	mov	r3, r9
 8005e16:	aa03      	add	r2, sp, #12
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	f7ff fee2 	bl	8005be4 <_printf_common>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d14c      	bne.n	8005ebe <_printf_i+0x1fe>
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	b004      	add	sp, #16
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	4835      	ldr	r0, [pc, #212]	; (8005f04 <_printf_i+0x244>)
 8005e30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e34:	6829      	ldr	r1, [r5, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e3c:	6029      	str	r1, [r5, #0]
 8005e3e:	061d      	lsls	r5, r3, #24
 8005e40:	d514      	bpl.n	8005e6c <_printf_i+0x1ac>
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	bf44      	itt	mi
 8005e46:	f043 0320 	orrmi.w	r3, r3, #32
 8005e4a:	6023      	strmi	r3, [r4, #0]
 8005e4c:	b91e      	cbnz	r6, 8005e56 <_printf_i+0x196>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f023 0320 	bic.w	r3, r3, #32
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	2310      	movs	r3, #16
 8005e58:	e7b0      	b.n	8005dbc <_printf_i+0xfc>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f043 0320 	orr.w	r3, r3, #32
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	2378      	movs	r3, #120	; 0x78
 8005e64:	4828      	ldr	r0, [pc, #160]	; (8005f08 <_printf_i+0x248>)
 8005e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e6a:	e7e3      	b.n	8005e34 <_printf_i+0x174>
 8005e6c:	0659      	lsls	r1, r3, #25
 8005e6e:	bf48      	it	mi
 8005e70:	b2b6      	uxthmi	r6, r6
 8005e72:	e7e6      	b.n	8005e42 <_printf_i+0x182>
 8005e74:	4615      	mov	r5, r2
 8005e76:	e7bb      	b.n	8005df0 <_printf_i+0x130>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	6826      	ldr	r6, [r4, #0]
 8005e7c:	6961      	ldr	r1, [r4, #20]
 8005e7e:	1d18      	adds	r0, r3, #4
 8005e80:	6028      	str	r0, [r5, #0]
 8005e82:	0635      	lsls	r5, r6, #24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0x1cc>
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <_printf_i+0x1d2>
 8005e8c:	0670      	lsls	r0, r6, #25
 8005e8e:	d5fb      	bpl.n	8005e88 <_printf_i+0x1c8>
 8005e90:	8019      	strh	r1, [r3, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	4615      	mov	r5, r2
 8005e98:	e7ba      	b.n	8005e10 <_printf_i+0x150>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	602a      	str	r2, [r5, #0]
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	6862      	ldr	r2, [r4, #4]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7fa f99a 	bl	80001e0 <memchr>
 8005eac:	b108      	cbz	r0, 8005eb2 <_printf_i+0x1f2>
 8005eae:	1b40      	subs	r0, r0, r5
 8005eb0:	6060      	str	r0, [r4, #4]
 8005eb2:	6863      	ldr	r3, [r4, #4]
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebc:	e7a8      	b.n	8005e10 <_printf_i+0x150>
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	47d0      	blx	sl
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d0ab      	beq.n	8005e24 <_printf_i+0x164>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	d413      	bmi.n	8005efa <_printf_i+0x23a>
 8005ed2:	68e0      	ldr	r0, [r4, #12]
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	4298      	cmp	r0, r3
 8005ed8:	bfb8      	it	lt
 8005eda:	4618      	movlt	r0, r3
 8005edc:	e7a4      	b.n	8005e28 <_printf_i+0x168>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d09b      	beq.n	8005e24 <_printf_i+0x164>
 8005eec:	3501      	adds	r5, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	9903      	ldr	r1, [sp, #12]
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dcf2      	bgt.n	8005ede <_printf_i+0x21e>
 8005ef8:	e7eb      	b.n	8005ed2 <_printf_i+0x212>
 8005efa:	2500      	movs	r5, #0
 8005efc:	f104 0619 	add.w	r6, r4, #25
 8005f00:	e7f5      	b.n	8005eee <_printf_i+0x22e>
 8005f02:	bf00      	nop
 8005f04:	08006225 	.word	0x08006225
 8005f08:	08006236 	.word	0x08006236

08005f0c <memmove>:
 8005f0c:	4288      	cmp	r0, r1
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	eb01 0402 	add.w	r4, r1, r2
 8005f14:	d902      	bls.n	8005f1c <memmove+0x10>
 8005f16:	4284      	cmp	r4, r0
 8005f18:	4623      	mov	r3, r4
 8005f1a:	d807      	bhi.n	8005f2c <memmove+0x20>
 8005f1c:	1e43      	subs	r3, r0, #1
 8005f1e:	42a1      	cmp	r1, r4
 8005f20:	d008      	beq.n	8005f34 <memmove+0x28>
 8005f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f2a:	e7f8      	b.n	8005f1e <memmove+0x12>
 8005f2c:	4402      	add	r2, r0
 8005f2e:	4601      	mov	r1, r0
 8005f30:	428a      	cmp	r2, r1
 8005f32:	d100      	bne.n	8005f36 <memmove+0x2a>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f3e:	e7f7      	b.n	8005f30 <memmove+0x24>

08005f40 <_free_r>:
 8005f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d044      	beq.n	8005fd0 <_free_r+0x90>
 8005f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4a:	9001      	str	r0, [sp, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f52:	bfb8      	it	lt
 8005f54:	18e4      	addlt	r4, r4, r3
 8005f56:	f000 f913 	bl	8006180 <__malloc_lock>
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <_free_r+0x94>)
 8005f5c:	9801      	ldr	r0, [sp, #4]
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	b933      	cbnz	r3, 8005f70 <_free_r+0x30>
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6014      	str	r4, [r2, #0]
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f6c:	f000 b90e 	b.w	800618c <__malloc_unlock>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d908      	bls.n	8005f86 <_free_r+0x46>
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1961      	adds	r1, r4, r5
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	bf01      	itttt	eq
 8005f7c:	6819      	ldreq	r1, [r3, #0]
 8005f7e:	685b      	ldreq	r3, [r3, #4]
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	e7ed      	b.n	8005f62 <_free_r+0x22>
 8005f86:	461a      	mov	r2, r3
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b10b      	cbz	r3, 8005f90 <_free_r+0x50>
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x46>
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	1855      	adds	r5, r2, r1
 8005f94:	42a5      	cmp	r5, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x70>
 8005f98:	6824      	ldr	r4, [r4, #0]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	d1e0      	bne.n	8005f66 <_free_r+0x26>
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	4421      	add	r1, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7da      	b.n	8005f66 <_free_r+0x26>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x78>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	e7d6      	b.n	8005f66 <_free_r+0x26>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1949      	addeq	r1, r1, r5
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6054      	str	r4, [r2, #4]
 8005fce:	e7ca      	b.n	8005f66 <_free_r+0x26>
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	200041f8 	.word	0x200041f8

08005fd8 <sbrk_aligned>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4e0e      	ldr	r6, [pc, #56]	; (8006014 <sbrk_aligned+0x3c>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b911      	cbnz	r1, 8005fea <sbrk_aligned+0x12>
 8005fe4:	f000 f8bc 	bl	8006160 <_sbrk_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f8b7 	bl	8006160 <_sbrk_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <sbrk_aligned+0x34>
 8005ff6:	1cc4      	adds	r4, r0, #3
 8005ff8:	f024 0403 	bic.w	r4, r4, #3
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d007      	beq.n	8006010 <sbrk_aligned+0x38>
 8006000:	1a21      	subs	r1, r4, r0
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f8ac 	bl	8006160 <_sbrk_r>
 8006008:	3001      	adds	r0, #1
 800600a:	d101      	bne.n	8006010 <sbrk_aligned+0x38>
 800600c:	f04f 34ff 	mov.w	r4, #4294967295
 8006010:	4620      	mov	r0, r4
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	200041fc 	.word	0x200041fc

08006018 <_malloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	1ccd      	adds	r5, r1, #3
 800601e:	f025 0503 	bic.w	r5, r5, #3
 8006022:	3508      	adds	r5, #8
 8006024:	2d0c      	cmp	r5, #12
 8006026:	bf38      	it	cc
 8006028:	250c      	movcc	r5, #12
 800602a:	2d00      	cmp	r5, #0
 800602c:	4607      	mov	r7, r0
 800602e:	db01      	blt.n	8006034 <_malloc_r+0x1c>
 8006030:	42a9      	cmp	r1, r5
 8006032:	d905      	bls.n	8006040 <_malloc_r+0x28>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	2600      	movs	r6, #0
 800603a:	4630      	mov	r0, r6
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	4e2e      	ldr	r6, [pc, #184]	; (80060fc <_malloc_r+0xe4>)
 8006042:	f000 f89d 	bl	8006180 <__malloc_lock>
 8006046:	6833      	ldr	r3, [r6, #0]
 8006048:	461c      	mov	r4, r3
 800604a:	bb34      	cbnz	r4, 800609a <_malloc_r+0x82>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ffc2 	bl	8005fd8 <sbrk_aligned>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	4604      	mov	r4, r0
 8006058:	d14d      	bne.n	80060f6 <_malloc_r+0xde>
 800605a:	6834      	ldr	r4, [r6, #0]
 800605c:	4626      	mov	r6, r4
 800605e:	2e00      	cmp	r6, #0
 8006060:	d140      	bne.n	80060e4 <_malloc_r+0xcc>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	4631      	mov	r1, r6
 8006066:	4638      	mov	r0, r7
 8006068:	eb04 0803 	add.w	r8, r4, r3
 800606c:	f000 f878 	bl	8006160 <_sbrk_r>
 8006070:	4580      	cmp	r8, r0
 8006072:	d13a      	bne.n	80060ea <_malloc_r+0xd2>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	3503      	adds	r5, #3
 8006078:	1a6d      	subs	r5, r5, r1
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	4629      	mov	r1, r5
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ffa5 	bl	8005fd8 <sbrk_aligned>
 800608e:	3001      	adds	r0, #1
 8006090:	d02b      	beq.n	80060ea <_malloc_r+0xd2>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	442b      	add	r3, r5
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e00e      	b.n	80060b8 <_malloc_r+0xa0>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	d41e      	bmi.n	80060de <_malloc_r+0xc6>
 80060a0:	2a0b      	cmp	r2, #11
 80060a2:	d916      	bls.n	80060d2 <_malloc_r+0xba>
 80060a4:	1961      	adds	r1, r4, r5
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	bf18      	it	ne
 80060ac:	6059      	strne	r1, [r3, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	bf08      	it	eq
 80060b2:	6031      	streq	r1, [r6, #0]
 80060b4:	5162      	str	r2, [r4, r5]
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	4638      	mov	r0, r7
 80060ba:	f104 060b 	add.w	r6, r4, #11
 80060be:	f000 f865 	bl	800618c <__malloc_unlock>
 80060c2:	f026 0607 	bic.w	r6, r6, #7
 80060c6:	1d23      	adds	r3, r4, #4
 80060c8:	1af2      	subs	r2, r6, r3
 80060ca:	d0b6      	beq.n	800603a <_malloc_r+0x22>
 80060cc:	1b9b      	subs	r3, r3, r6
 80060ce:	50a3      	str	r3, [r4, r2]
 80060d0:	e7b3      	b.n	800603a <_malloc_r+0x22>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	bf0c      	ite	eq
 80060d8:	6032      	streq	r2, [r6, #0]
 80060da:	605a      	strne	r2, [r3, #4]
 80060dc:	e7ec      	b.n	80060b8 <_malloc_r+0xa0>
 80060de:	4623      	mov	r3, r4
 80060e0:	6864      	ldr	r4, [r4, #4]
 80060e2:	e7b2      	b.n	800604a <_malloc_r+0x32>
 80060e4:	4634      	mov	r4, r6
 80060e6:	6876      	ldr	r6, [r6, #4]
 80060e8:	e7b9      	b.n	800605e <_malloc_r+0x46>
 80060ea:	230c      	movs	r3, #12
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4638      	mov	r0, r7
 80060f0:	f000 f84c 	bl	800618c <__malloc_unlock>
 80060f4:	e7a1      	b.n	800603a <_malloc_r+0x22>
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	e7de      	b.n	80060b8 <_malloc_r+0xa0>
 80060fa:	bf00      	nop
 80060fc:	200041f8 	.word	0x200041f8

08006100 <_realloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	4680      	mov	r8, r0
 8006106:	4614      	mov	r4, r2
 8006108:	460e      	mov	r6, r1
 800610a:	b921      	cbnz	r1, 8006116 <_realloc_r+0x16>
 800610c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	4611      	mov	r1, r2
 8006112:	f7ff bf81 	b.w	8006018 <_malloc_r>
 8006116:	b92a      	cbnz	r2, 8006124 <_realloc_r+0x24>
 8006118:	f7ff ff12 	bl	8005f40 <_free_r>
 800611c:	4625      	mov	r5, r4
 800611e:	4628      	mov	r0, r5
 8006120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006124:	f000 f838 	bl	8006198 <_malloc_usable_size_r>
 8006128:	4284      	cmp	r4, r0
 800612a:	4607      	mov	r7, r0
 800612c:	d802      	bhi.n	8006134 <_realloc_r+0x34>
 800612e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006132:	d812      	bhi.n	800615a <_realloc_r+0x5a>
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff ff6e 	bl	8006018 <_malloc_r>
 800613c:	4605      	mov	r5, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	d0ed      	beq.n	800611e <_realloc_r+0x1e>
 8006142:	42bc      	cmp	r4, r7
 8006144:	4622      	mov	r2, r4
 8006146:	4631      	mov	r1, r6
 8006148:	bf28      	it	cs
 800614a:	463a      	movcs	r2, r7
 800614c:	f7ff fbb8 	bl	80058c0 <memcpy>
 8006150:	4631      	mov	r1, r6
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fef4 	bl	8005f40 <_free_r>
 8006158:	e7e1      	b.n	800611e <_realloc_r+0x1e>
 800615a:	4635      	mov	r5, r6
 800615c:	e7df      	b.n	800611e <_realloc_r+0x1e>
	...

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	; (800617c <_sbrk_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fb fa1e 	bl	80015ac <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20004200 	.word	0x20004200

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__malloc_lock+0x8>)
 8006182:	f000 b811 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	20004204 	.word	0x20004204

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	; (8006194 <__malloc_unlock+0x8>)
 800618e:	f000 b80c 	b.w	80061aa <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	20004204 	.word	0x20004204

08006198 <_malloc_usable_size_r>:
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f18      	subs	r0, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfbc      	itt	lt
 80061a2:	580b      	ldrlt	r3, [r1, r0]
 80061a4:	18c0      	addlt	r0, r0, r3
 80061a6:	4770      	bx	lr

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
